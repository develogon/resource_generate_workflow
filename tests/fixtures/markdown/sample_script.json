[
  {
    "name": "author-speak-before",
    "value": "プログラミングの世界へようこそ。今回は基本概念について学んでいきましょう。"
  },
  {
    "name": "slide-viewer",
    "value": "プログラミング基本概念のタイトルと4つの主要概念（変数、条件分岐、ループ、関数）のアイコン"
  },
  {
    "name": "author-speak-before",
    "value": "まずは「変数」という概念から始めましょう。変数とは、データを一時的に保存する箱のようなものです。"
  },
  {
    "name": "slide-viewer",
    "value": "変数の概念図：箱と値の関係を表したイラスト"
  },
  {
    "name": "file-explorer-create-file",
    "value": "variables.py"
  },
  {
    "name": "file-explorer-open-file",
    "value": "variables.py"
  },
  {
    "name": "editor-type",
    "value": "# Pythonでの変数の例"
  },
  {
    "name": "editor-enter",
    "value": "1"
  },
  {
    "name": "editor-type",
    "value": "age = 25               # 整数型"
  },
  {
    "name": "editor-enter",
    "value": "1"
  },
  {
    "name": "editor-type",
    "value": "height = 175.5         # 浮動小数点型"
  },
  {
    "name": "editor-enter",
    "value": "1"
  },
  {
    "name": "editor-type",
    "value": "name = \"山田太郎\"      # 文字列型"
  },
  {
    "name": "editor-enter",
    "value": "1"
  },
  {
    "name": "editor-type",
    "value": "is_student = True      # ブール型"
  },
  {
    "name": "editor-save",
    "value": "1"
  },
  {
    "name": "author-speak-before",
    "value": "このように、変数にはさまざまな種類のデータを格納することができます。例えば、`age = 25` というプログラムは、「age」という名前の箱に「25」という値を入れるという意味です。"
  },
  {
    "name": "author-speak-before",
    "value": "次に重要なのは「条件分岐」です。これは特定の条件によって処理を変えるための仕組みです。"
  },
  {
    "name": "slide-viewer",
    "value": "条件分岐の図：フローチャートのような分岐する矢印"
  },
  {
    "name": "file-explorer-create-file",
    "value": "conditionals.py"
  },
  {
    "name": "file-explorer-open-file",
    "value": "conditionals.py"
  },
  {
    "name": "editor-type",
    "value": "# 条件分岐の例"
  },
  {
    "name": "editor-enter",
    "value": "1"
  },
  {
    "name": "editor-type",
    "value": "age = 18"
  },
  {
    "name": "editor-enter",
    "value": "2"
  },
  {
    "name": "editor-type",
    "value": "if age >= 20:"
  },
  {
    "name": "editor-enter",
    "value": "1"
  },
  {
    "name": "editor-space",
    "value": "4"
  },
  {
    "name": "editor-type",
    "value": "print(\"成人です\")"
  },
  {
    "name": "editor-enter",
    "value": "1"
  },
  {
    "name": "editor-type",
    "value": "else:"
  },
  {
    "name": "editor-enter",
    "value": "1"
  },
  {
    "name": "editor-space",
    "value": "4"
  },
  {
    "name": "editor-type",
    "value": "print(\"未成年です\")"
  },
  {
    "name": "editor-save",
    "value": "1"
  },
  {
    "name": "author-speak-before",
    "value": "例えば、「もし年齢が20歳以上なら成人、そうでなければ未成年」というように判断する場合に使います。これによりプログラムは状況に応じて異なる動作をすることができます。"
  },
  {
    "name": "author-speak-before",
    "value": "続いて「ループ」という概念です。これは同じ処理を繰り返し行うための仕組みです。"
  },
  {
    "name": "slide-viewer",
    "value": "ループの図：円形の矢印で繰り返しを表現"
  },
  {
    "name": "file-explorer-create-file",
    "value": "loops.py"
  },
  {
    "name": "file-explorer-open-file",
    "value": "loops.py"
  },
  {
    "name": "editor-type",
    "value": "# for文の例"
  },
  {
    "name": "editor-enter",
    "value": "1"
  },
  {
    "name": "editor-type",
    "value": "for i in range(5):"
  },
  {
    "name": "editor-enter",
    "value": "1"
  },
  {
    "name": "editor-space",
    "value": "4"
  },
  {
    "name": "editor-type",
    "value": "print(i)  # 0, 1, 2, 3, 4が順番に表示される"
  },
  {
    "name": "editor-enter",
    "value": "2"
  },
  {
    "name": "editor-type",
    "value": "# while文の例"
  },
  {
    "name": "editor-enter",
    "value": "1"
  },
  {
    "name": "editor-type",
    "value": "count = 0"
  },
  {
    "name": "editor-enter",
    "value": "1"
  },
  {
    "name": "editor-type",
    "value": "while count < 5:"
  },
  {
    "name": "editor-enter",
    "value": "1"
  },
  {
    "name": "editor-space",
    "value": "4"
  },
  {
    "name": "editor-type",
    "value": "print(count)"
  },
  {
    "name": "editor-enter",
    "value": "1"
  },
  {
    "name": "editor-space",
    "value": "4"
  },
  {
    "name": "editor-type",
    "value": "count += 1  # 0, 1, 2, 3, 4が順番に表示される"
  },
  {
    "name": "editor-save",
    "value": "1"
  },
  {
    "name": "author-speak-before",
    "value": "例えば、1から5まで数える処理を5回書くのではなく、ループを使って簡潔に書くことができます。for文とwhile文の二種類があり、状況に応じて使い分けます。"
  },
  {
    "name": "author-speak-before",
    "value": "最後に「関数」という概念です。関数は特定の処理をひとまとめにして名前を付け、再利用可能にしたものです。"
  },
  {
    "name": "slide-viewer",
    "value": "関数のイメージ図：入力と出力の関係を示す図"
  },
  {
    "name": "file-explorer-create-file",
    "value": "functions.py"
  },
  {
    "name": "file-explorer-open-file",
    "value": "functions.py"
  },
  {
    "name": "editor-type",
    "value": "# 関数の定義"
  },
  {
    "name": "editor-enter",
    "value": "1"
  },
  {
    "name": "editor-type",
    "value": "def greet(name):"
  },
  {
    "name": "editor-enter",
    "value": "1"
  },
  {
    "name": "editor-space",
    "value": "4"
  },
  {
    "name": "editor-type",
    "value": "return f\"こんにちは、{name}さん\""
  },
  {
    "name": "editor-enter",
    "value": "2"
  },
  {
    "name": "editor-type",
    "value": "# 関数の呼び出し"
  },
  {
    "name": "editor-enter",
    "value": "1"
  },
  {
    "name": "editor-type",
    "value": "message = greet(\"山田\")"
  },
  {
    "name": "editor-enter",
    "value": "1"
  },
  {
    "name": "editor-type",
    "value": "print(message)  # 「こんにちは、山田さん」と表示される"
  },
  {
    "name": "editor-save",
    "value": "1"
  },
  {
    "name": "author-speak-before",
    "value": "関数を使うことで、同じ処理を何度も書く必要がなくなり、コードの再利用性と可読性が向上します。"
  },
  {
    "name": "slide-viewer",
    "value": "4つの概念を結びつけた図：各概念の関係性"
  },
  {
    "name": "author-speak-before",
    "value": "今回は変数、条件分岐、ループ、関数という4つの基本概念について学びました。これらの概念を理解することで、プログラミングの基礎が身につきます。次回は実際にこれらの概念を組み合わせたプログラムを作成していきましょう。"
  }
] 